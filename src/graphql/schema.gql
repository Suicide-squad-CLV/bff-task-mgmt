# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

directive @upper on FIELD_DEFINITION

type ErrorType {
  code: String
  message: String!
}

input ForgotPasswordInput {
  email: String!
}

type GQLStatus {
  backgroundColor: String!
  id: String!
  statusName: String!
  textColor: String!
}

type GQLTask {
  assignUser: User
  id: Int!
  status: GQLStatus
  taskDescription: String
  taskTitle: String!
}

input LoginInput {
  email: String!
  password: String!
}

type LoginResponse {
  error: ErrorType
  token: Token!
  user: User!
}

type Mutation {
  addTask(newTaskData: NewTaskInput!): Int!
  forgotPassword(emailInput: ForgotPasswordInput!): SuccessReponse
  login(loginInput: LoginInput!): LoginResponse!
  register(registerInput: RegisterInput!): RegisterResponse!
  removeTask(id: Int!): Boolean!
  removeUser(id: String!): SuccessReponse
  updatePassword(passwordInput: UpdatePasswordInput!): SuccessReponse
  uploadAvatar(avatar: Upload!, userId: String!): User!
}

input NewTaskInput {
  assignUserId: Int
  description: String = ""
  statusId: String!
  title: String!
}

type Query {
  getAllUsers: [User!]!
  getUser(id: String!): User!
  profile: User!
  statusList: [GQLStatus!]!
  task(id: Int!): GQLTask!
  tasks(
    """Task status"""
    statusId: String

    """Task title"""
    title: String

    """Assign user Id"""
    userId: Int
  ): [GQLTask!]!
}

input RegisterInput {
  email: String!
  fullname: String!
  password: String!
}

type RegisterResponse {
  error: ErrorType
  token: Token
  user: User
}

type SuccessReponse {
  error: ErrorType
  message: String!
  success: Boolean!
}

type Token {
  expiration: Float!
  token: String!
  type: String!
}

input UpdatePasswordInput {
  password: String!
  token: String!
}

"""The `Upload` scalar type represents a file upload."""
scalar Upload

type User {
  avatar: String
  createdAt: String
  email: String!
  fullname: String!
  hasChangePassword: Boolean
  id: ID!
  isDeleted: Boolean
  password: String!
  refreshToken: String
  tasks: [GQLTask!]!
  updatedAt: String
}